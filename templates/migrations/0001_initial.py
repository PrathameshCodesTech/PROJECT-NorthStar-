# Generated by Django 5.2.4 on 2025-08-19 12:15

import datetime
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Control',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(default='system', max_length=100)),
                ('updated_by', models.CharField(default='system', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('control_code', models.CharField(help_text="Unique control code like 'AC-001'", max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Control code must be like AC-001, CM-001', regex='^[A-Z]{2,4}-\\d{3}$')])),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('objective', models.TextField(help_text='What this control aims to achieve')),
                ('control_type', models.CharField(choices=[('PREVENTIVE', 'Preventive'), ('DETECTIVE', 'Detective'), ('CORRECTIVE', 'Corrective')], default='PREVENTIVE', max_length=20)),
                ('frequency', models.CharField(choices=[('CONTINUOUS', 'Continuous'), ('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly'), ('ANNUALLY', 'Annually')], default='MONTHLY', max_length=20)),
                ('risk_level', models.CharField(choices=[('HIGH', 'High'), ('MEDIUM', 'Medium'), ('LOW', 'Low')], default='MEDIUM', max_length=10)),
                ('sort_order', models.PositiveIntegerField(default=1)),
            ],
            options={
                'db_table': 'controls',
                'ordering': ['subcategory', 'sort_order', 'control_code'],
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(default='system', max_length=100)),
                ('updated_by', models.CharField(default='system', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(help_text="Short code like 'ITGC', 'BPC'", max_length=10)),
                ('description', models.TextField(blank=True)),
                ('sort_order', models.PositiveIntegerField(default=1)),
            ],
            options={
                'db_table': 'domains',
                'ordering': ['framework', 'sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='AssessmentQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(default='system', max_length=100)),
                ('updated_by', models.CharField(default='system', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('question', models.TextField()),
                ('question_type', models.CharField(choices=[('YES_NO', 'Yes/No'), ('MULTIPLE_CHOICE', 'Multiple Choice'), ('TEXT', 'Text Response'), ('NUMERIC', 'Numeric'), ('DATE', 'Date')], default='YES_NO', max_length=20)),
                ('options', models.JSONField(blank=True, help_text='For multiple choice questions - list of options', null=True)),
                ('is_mandatory', models.BooleanField(default=True)),
                ('sort_order', models.PositiveIntegerField(default=1)),
                ('control', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_questions', to='templates.control')),
            ],
            options={
                'db_table': 'assessment_questions',
                'ordering': ['control', 'sort_order'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(default='system', max_length=100)),
                ('updated_by', models.CharField(default='system', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(help_text="Short code like 'AC', 'CM'", max_length=10)),
                ('description', models.TextField(blank=True)),
                ('sort_order', models.PositiveIntegerField(default=1)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='templates.domain')),
            ],
            options={
                'verbose_name_plural': 'categories',
                'db_table': 'categories',
                'ordering': ['domain', 'sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EvidenceRequirement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(default='system', max_length=100)),
                ('updated_by', models.CharField(default='system', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('evidence_type', models.CharField(choices=[('DOCUMENT', 'Document'), ('SCREENSHOT', 'Screenshot'), ('VIDEO', 'Video'), ('LOG_FILE', 'Log File'), ('REPORT', 'Report'), ('POLICY', 'Policy'), ('PROCEDURE', 'Procedure')], default='DOCUMENT', max_length=20)),
                ('is_mandatory', models.BooleanField(default=True)),
                ('file_format', models.CharField(blank=True, help_text="Accepted file formats like 'PDF, DOC, XLSX'", max_length=50)),
                ('sort_order', models.PositiveIntegerField(default=1)),
                ('control', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evidence_requirements', to='templates.control')),
            ],
            options={
                'db_table': 'evidence_requirements',
                'ordering': ['control', 'sort_order'],
            },
        ),
        migrations.CreateModel(
            name='Framework',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(default='system', max_length=100)),
                ('updated_by', models.CharField(default='system', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(help_text="Short name like 'SOX', 'ISO27001'", max_length=50, unique=True)),
                ('full_name', models.CharField(help_text="Full name like 'Sarbanes-Oxley Act'", max_length=200)),
                ('description', models.TextField(blank=True)),
                ('version', models.CharField(default='1.0', help_text="Version like '2024.1', '2022.1'", max_length=20)),
                ('effective_date', models.DateField(default=datetime.date.today, help_text='When this framework version becomes effective')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('ACTIVE', 'Active'), ('DEPRECATED', 'Deprecated')], default='DRAFT', max_length=20)),
            ],
            options={
                'db_table': 'frameworks',
                'ordering': ['name', 'version'],
                'constraints': [models.UniqueConstraint(fields=('name', 'version'), name='unique_framework_name_version')],
            },
        ),
        migrations.AddField(
            model_name='domain',
            name='framework',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='domains', to='templates.framework'),
        ),
        migrations.CreateModel(
            name='Subcategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(default='system', max_length=100)),
                ('updated_by', models.CharField(default='system', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(help_text="Short code like 'UAM', 'SAM'", max_length=10)),
                ('description', models.TextField(blank=True)),
                ('sort_order', models.PositiveIntegerField(default=1)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='templates.category')),
            ],
            options={
                'verbose_name_plural': 'subcategories',
                'db_table': 'subcategories',
                'ordering': ['category', 'sort_order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='control',
            name='subcategory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='controls', to='templates.subcategory'),
        ),
        migrations.AddConstraint(
            model_name='category',
            constraint=models.UniqueConstraint(fields=('domain', 'code'), name='unique_category_code_per_domain'),
        ),
        migrations.AddConstraint(
            model_name='category',
            constraint=models.UniqueConstraint(fields=('domain', 'name'), name='unique_category_name_per_domain'),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together={('domain', 'code')},
        ),
        migrations.AddConstraint(
            model_name='domain',
            constraint=models.UniqueConstraint(fields=('framework', 'code'), name='unique_domain_code_per_framework'),
        ),
        migrations.AddConstraint(
            model_name='domain',
            constraint=models.UniqueConstraint(fields=('framework', 'name'), name='unique_domain_name_per_framework'),
        ),
        migrations.AlterUniqueTogether(
            name='domain',
            unique_together={('framework', 'code')},
        ),
        migrations.AddConstraint(
            model_name='subcategory',
            constraint=models.UniqueConstraint(fields=('category', 'code'), name='unique_subcategory_code_per_category'),
        ),
        migrations.AddConstraint(
            model_name='subcategory',
            constraint=models.UniqueConstraint(fields=('category', 'name'), name='unique_subcategory_name_per_category'),
        ),
        migrations.AlterUniqueTogether(
            name='subcategory',
            unique_together={('category', 'code')},
        ),
    ]
